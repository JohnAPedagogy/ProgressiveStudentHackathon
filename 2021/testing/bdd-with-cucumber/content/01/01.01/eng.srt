1
0:00:00,000 --> 0:00:04,000
BDD stands for Behaviour Driven Development

2
0:00:04,100 --> 0:00:05,700
But what does that mean?

3
0:00:06,000 --> 0:00:09,000
What does it mean to do BDD?

4
0:00:09,500 --> 0:00:13,750
BDD is a way for software teams to work
that closes the gap

5
0:00:13,900 --> 0:00:17,500
between business people
and technical people by:

6
0:00:18,000 --> 0:00:20,250
Encouraging collaboration across roles

7
0:00:20,300 --> 0:00:23,750
to build shared understanding of
the desired behaviour of the system

8
0:00:24,500 --> 0:00:27,200
Producing system documentation that
guides development

9
0:00:27,500 --> 0:00:30,300
and is automatically checked against
the system’s behaviour

10
0:00:31,000 --> 0:00:36,300
Working in rapid, small iterations to
increase feedback and the flow of value

11
0:00:38,000 --> 0:00:43,000
Doing BDD involves doing these
three things over and over again:

12
0:00:43,600 --> 0:00:47,000
First, you take a small upcoming change
to the system

13
0:00:47,300 --> 0:00:48,500
like a User Story

14
0:00:49,000 --> 0:00:52,300
and have a conversation to explore,
discover, and agree

15
0:00:52,310 --> 0:00:55,000
on the details of how we want the
system to behave

16
0:00:55,300 --> 0:00:57,500
using concrete examples

17
0:00:58,020 --> 0:01:02,000
Next, you document those examples
in a way that could be automated

18
0:01:02,250 --> 0:01:03,400
and check for agreement

19
0:01:04,300 --> 0:01:06,900
Finally, you actually get coding and

20
0:01:07,100 --> 0:01:10,800
implement the behaviour described
by each documented example

21
0:01:11,000 --> 0:01:13,000
starting with an automated test

22
0:01:13,100 --> 0:01:15,500
to guide the development of the code.

23
0:01:16,300 --> 0:01:23,500
We call these practices Discovery
Formulation and Automation.

24
0:01:24,600 --> 0:01:28,750
The idea is to make each change small
and iterate rapidly

25
0:01:28,800 --> 0:01:33,000
moving back up a level each time you
need more information

26
0:01:33,250 --> 0:01:36,000
Every time you automate and implement
a new example

27
0:01:36,100 --> 0:01:38,500
you’ve added something
valuable to your system

28
0:01:38,510 --> 0:01:40,600
and you’re ready to respond to feedback

29
0:01:41,700 --> 0:01:45,250
Over time, the documented examples
become an asset

30
0:01:45,300 --> 0:01:47,000
that enables your team to continue

31
0:01:47,100 --> 0:01:50,000
confidently and rapidly making
changes to the system.

32
0:01:50,250 --> 0:01:52,500
We call this “living documentation”,

33
0:01:52,750 --> 0:01:54,750
because the code reflects the documentation,

34
0:01:54,800 --> 0:01:58,200
and the documentation reflects the team’s
shared understanding

35
0:01:58,300 --> 0:01:59,500
of what the code does

36
0:02:00,300 --> 0:02:01,500
This shared understanding

37
0:02:01,800 --> 0:02:03,200
and the living documentation

38
0:02:03,300 --> 0:02:05,500
is constantly evolving.

39
0:02:06,100 --> 0:02:09,000
Cucumber is a tool that facilitates BDD

40
0:02:09,600 --> 0:02:11,250
We can’t teach you about Cucumber

41
0:02:11,400 --> 0:02:13,800
without teaching you about BDD too

42
0:02:14,000 --> 0:02:16,000
So, that’s where we’re going to start
